/* automatically generated by rust-bindgen 0.66.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    #[repr(C)]
    pub struct MyClass {
        pub _address: u8,
    }
    extern "C" {
        #[link_name = "\u{1}__ZN7MyClass8myMethodEv"]
        pub fn MyClass_myMethod(this: *mut root::MyClass);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN7MyClassC1Ev"]
        pub fn MyClass_MyClass(this: *mut root::MyClass);
    }
    impl MyClass {
        #[inline]
        pub unsafe fn myMethod(&mut self) {
            MyClass_myMethod(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
            MyClass_MyClass(__bindgen_tmp.as_mut_ptr());
            __bindgen_tmp.assume_init()
        }
    }
    #[repr(C)]
    pub struct ZFCounter {
        pub count: ::std::os::raw::c_int,
    }
    extern "C" {
        #[link_name = "\u{1}__ZN9ZFCounter9incrementEv"]
        pub fn ZFCounter_increment(this: *mut root::ZFCounter);
    }
    extern "C" {
        #[link_name = "\u{1}__ZN9ZFCounterC1Ev"]
        pub fn ZFCounter_ZFCounter(this: *mut root::ZFCounter);
    }
    impl ZFCounter {
        #[inline]
        pub unsafe fn increment(&mut self) {
            ZFCounter_increment(self)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
            ZFCounter_ZFCounter(__bindgen_tmp.as_mut_ptr());
            __bindgen_tmp.assume_init()
        }
    }
}
